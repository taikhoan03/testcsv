@model IEnumerable<BL.WorkingSetItem>
    <style>
        label{
            font-weight:normal;
        }
        #divSelected{
            color:white;
        }
        #moreInfo>div{
            padding:10px;
        }
        #showtbl input[type=checkbox]:checked + label{
            font-weight:bold
        }
        /*input[type=checkbox]:checked + label{
            font-weight:bold
        }*/
    </style>
<style>
    .show-hidden-detail {
        cursor: pointer;
        color: #e75b21;
    }

    .st_0, .st_1, .st_2, .st_3, .st_4 {
        padding: 3px;
        font-weight: normal;
        height: 100%;
        width: 100%;
    }

    .st_0 {
        background: #808080;
    }

    .st_1 {
        background: #ff6a00;
        font-weight: bold;
    }

    .st_2 {
        background: #4cff00;
    }

    .st_3 {
        background: #ff0000;
    }

    .st_4 {
        background: #153a47;
        color: white;
        font-style: italic;
    }
    .chkContent{
        min-width:74px;
    }
</style>
@{ 
    var reqs = (List<BL.Req_Transfer_Columns_to_Records>)ViewBag.reqs;
    var num_err_display_char_limit = 100;
}
<script src="~/Content/js/plugins/jquery-ui.min.js"></script>
<script src="~/scripts/angular.min.js"></script>
<script src="~/scripts/angular-checklist-model.js"></script>
<div ng-app="myApp" ng-controller="myCtrl">
    
    <table class="table">
        <tr>
            <th>
                @Html.DisplayNameFor(model => model.WorkingSetId)
            </th>
            <th>
                @Html.DisplayNameFor(model => model.Filename)
            </th>
            <th>
                @Html.DisplayNameFor(model => model.PrimaryKey)
            </th>
            <th>
                @Html.DisplayNameFor(model => model.SecondaryKeys)
            </th>
            <th>
                @Html.DisplayNameFor(model => model.IsMerged)
            </th>
            <th></th>
        </tr>

        @foreach (var item in Model)
        {
            <tr>
                <td>
                    @Html.DisplayFor(modelItem => item.WorkingSetId)
                </td>
                <td>
                    @Html.DisplayFor(modelItem => item.Filename)
                </td>
                <td>
                    @Html.DisplayFor(modelItem => item.PrimaryKey)
                </td>
                <td>
                    @Html.DisplayFor(modelItem => item.SecondaryKeys)
                </td>
                <td>
                    @Html.DisplayFor(modelItem => item.IsMerged)
                </td>
                <td>
                    <a id="select_@item.Id" href="#" ng-click="loadfields(@item.Id,'@item.Filename')">Select</a>
                </td>
            </tr>
        }

    </table>
    
    <div >
        <div style="margin:15px 0;border: dotted 1px blue;border-right: none;border-left: none;">
            <h4>Note:</h4>
            <div>
                <strong>Ignore Null</strong> that mean IF this selected field data is <strong>NULL</strong>, it will be ignored (not) to create record

            </div>
            <div>
                <strong>Ignore Zero</strong> that mean IF this selected field data is <strong>0</strong>, it will be ignored (not) to create record
            </div>
        </div>
        <table id="showtbl"  style="display:none;width: 100%">
            <tr>
                <td>
                    <div id="divFieldsSelect">
                        <div  ng-repeat="x in fields">
                            
                                <input id="{{x.Fieldname}}" type="checkbox" 
                                       checklist-model="selected_fields" 
                                       checklist-value="x.Fieldname"> 
                            <label for="{{x.Fieldname}}">{{x.Fieldname}}</label>
                            
                        </div>
                    </div>
                </td>
                <td>
                    ===>
                </td>
                <td style="background:#0094ff;padding:20px;border-right:solid 1px #ffddcc">
                    <div id="divSelected">
                        <strong>Fields selected:</strong>
                        <div ng-model="selected_fields" ng-repeat="x in selected_fields">
                            <label style="min-width:300px;border-right:solid 1px;">{{$index +' - '+ x }}</label>

                            <span class="chkContent">
                                <input type="checkbox" id="ign_null_{{$index}}" class="ign_null" />
                                <label for="ign_null_{{$index}}">Ignore Null</label>
                            </span>

                            <span>
                                <input type="checkbox" id="ign_zero_{{$index}}" class="ign_zero" />
                                <label for="ign_zero_{{$index}}">Ignore Zero</label>
                            </span>
                        </div>
                    </div>
                </td>
                <td style="background:#0094ff">
                    
                    <div id="moreInfo">
                        <div>Name of new field: 
                        <input type="text" name="newFieldName" ng-model="newFieldName" required /></div>
                        <div>
                            New file name:

                            <input type="text" name="newFileName" ng-model="newFileName" required />
                        </div>
                        
                        @*<div style="font-weight:bold">{{newFieldName}}</div>*@
                    </div>
                    <div>
                        <input type="button" value="Save" ng-click="save()" style="width:200px;line-height: 30px;margin: 20px"/>
                    </div>
                </td>
            </tr>
        </table>
       

    </div>

    <br />
    <h3>Request Logs:</h3>
    <table class="table1">
        <tr>
            <th>
                WorkingSetId
            </th>
            <th>
                CreatedBy
            </th>
            <th>
                CreatedDate
            </th>
            <th>
                TimeCost (s)
            </th>
            <th>
                Status
            </th>
            <th>
                IsDeleted
            </th>
            <th>
                Name
            </th>
            <th>
                Detail
            </th>
            <th>
                COMHandle
            </th>
            <th>
                IsReady
            </th>
            <th></th>
        </tr>

        @foreach (var item in reqs)
        {
            <tr>
                <td>
                    @*@Html.DisplayFor(modelItem => item.WorkingSetId)*@
                    <a href="@Url.Action("Manage","WorkingSet")?id=@item.WorkingSetId">@item.WorkingSetId</a>
                </td>
                <td>
                    @Html.DisplayFor(modelItem => item.CreatedBy)
                </td>
                <td>
                    @Html.DisplayFor(modelItem => item.CreatedDate)
                </td>
                <td>
                    @Html.DisplayFor(modelItem => item.TimeCost)
                </td>
                <td>

                    @if (item.Status == 0)
                {
                        <label class="st_@item.Status">In-queue</label>
                    }
                    else if (item.Status == 1)
                    {
                        <label class="st_@item.Status">Processing</label>
                    }
                    else if (item.Status == 2)
                    {
                        <label class="st_@item.Status">Success</label>
                    }
                    else if (item.Status == 3)
                    {
                        <label class="st_@item.Status">FAIL</label>
                    }
                    else if (item.Status == 4)
                    {
                        <label class="st_@item.Status">Detached</label>
                    }
                </td>
                <td>
                    @Html.DisplayFor(modelItem => item.IsDeleted)
                </td>
                <td>
                    @Html.DisplayFor(modelItem => item.OutputName)
                </td>
                <td width="20%">
                    @if (!string.IsNullOrEmpty(item.Detail))
                {
                    if (item.Detail.Length > num_err_display_char_limit)
                    {
                            <div class="show-hidden-detail">
                                <div>@item.Detail.Substring(0, num_err_display_char_limit) ...</div>
                                <div class="hidden-content" style="display:none">
                                    @item.Detail
                                </div>
                            </div>
                        }
                        else
                        {
                            @Html.DisplayFor(modelItem => item.Detail)
                        }
                    }

                </td>
                <td>
                    @Html.DisplayFor(modelItem => item.COMHandle)
                </td>
                <td>
                    @Html.DisplayFor(modelItem => item.IsReady)
                </td>
                <td>
                    @*@Html.ActionLink("Edit", "Edit", new { id = item.Id }) |
                        @Html.ActionLink("Details", "Details", new { id = item.Id }) |
                        @Html.ActionLink("Delete", "Delete", new { id = item.Id })*@
                    <a style="margin-right:10px" at-href="@Url.Action("IncludeTransferColumnsToRecord","WorkingSet")/?reqid=@item.Id" onclick="IncludeTransferColumnsToRecord(this)" href="#">Include this file</a>
                    <a href="#" ng-click="loadthis(@item.WorkingSetItemId,[@string.Join(",",item.StrColumns.Split(new string[] { ";];"},StringSplitOptions.None).Select(p=>"\""+p+"\""))],
                       [@string.Join(",",item.IgnoreOnNull.Split(new string[] { ","},StringSplitOptions.None).Select(p=>"\""+p+"\""))],
                       [@string.Join(",",item.IgnoreOnZero.Split(new string[] { ","},StringSplitOptions.None).Select(p=>"\""+p+"\""))],'@item.New_Field_Name','@item.OutputName')">Load this request</a>

                </td>
            </tr>
        }

    </table>
</div>
<script type="text/javascript">
    
    var app = angular.module('myApp', ["checklist-model"]);
    app.factory('Position', ['$timeout', function($timeout) {
        
        }]);
    app.controller('myCtrl', function($scope,$http) {
        $scope.newFieldName = "new_field_name";
        $scope.newFileName = "FILE_NAME";
        $scope.fileid = 0;
        $scope.selected_fields = [];
        $scope.clear = function () {
            $scope.selected_fields = [];
        }
        $scope.loadfields = function (id,name) {
            $http.get('@Url.Action("GetLayout", "WorkingSet")?fileid='+id).success(function (root) {
                $scope.fields = root;
                $scope.fileid=id;
                var _time=$.datepicker.formatDate('yymmdd', new Date());
                $scope.newFileName=name.replace(/.txt/gi,'').replace(/.csv/gi,'')+'_'+_time+'.csv';
                $('#showtbl').show();
                $scope.clear();
            });

        }
        $scope.loadthis = function (id,columns,arrIgnoreNull,arrIgnoreZero,new_field_name,outputname) {
            
            
            //var item = $('#select_' + id).trigger("click");
            var currentButton = angular.element('#select_' + id);
            setTimeout(function () {
                $scope.newFieldName = new_field_name;
                //$scope.newFileName = outputname;
                currentButton.triggerHandler("click");
                setTimeout(function () {
                    var divColumns = $('#divFieldsSelect');
                    
                    for (var i = 0; i < columns.length; i++) {
                        var col = columns[i];
                        $scope.selected_fields.push(col);
                    }

                    divColumns.find('input[type="checkbox"]:first').trigger('click');
                    setTimeout(function () {
                        
                        var rowdivSelected = $('#divSelected').find('div');
                        for (var i = 0; i < $(rowdivSelected).length; i++) {
                            var row = $(rowdivSelected[i]);
                            console.log(row);
                            if (arrIgnoreNull[i] == 'true') {
                                row.find('.ign_null').prop('checked', true);;//.trigger('click');
                            }else{
                                row.find('.ign_null').prop('checked', false);;//.trigger('click');
                            }
                            if (arrIgnoreZero[i] == 'true') {
                                row.find('.ign_zero').prop('checked', true);;//.trigger('click');
                            } else {
                                row.find('.ign_zero').prop('checked', false);;//.trigger('click');
                            }
                        }
                    }, 100);
                    
                },800);
            }, 100);
            
        }
        $scope.save = function () {
            var fields = $('#divFieldsSelect input[type="checkbox"]:checked');
            console.log($scope.fields);
            console.log($scope.newFieldName);
            console.log($scope.newFileName);
            console.log($scope.selected_fields);
            var strIgnoreNull = "";
            var strIgnoreZero = "";
            var objsIgnoreNull = $('.ign_null');
            var arrObjs = [];
            for (var i = 0; i < objsIgnoreNull.length; i++) {
                var obj = objsIgnoreNull[i];
                arrObjs.push($(obj).is(':checked'));
            }
            strIgnoreNull = arrObjs.join();


            objsIgnoreNull = $('.ign_zero');
            arrObjs = [];
            for (var i = 0; i < objsIgnoreNull.length; i++) {
                var obj = objsIgnoreNull[i];
                arrObjs.push($(obj).is(':checked'));
            }
            strIgnoreZero = arrObjs.join();


            
            console.log(strIgnoreNull);
            console.log(strIgnoreZero);
            console.log(arrObjs);
            //return;
            if($scope.selected_fields.length==0){
                alert('Please select at least one or more columns');
                return;
            }
            //$.colorbox({ html: "<h5>This proccess could run a little longer, please wait</h5>" });
            $.post('@Url.Action("postTransferColumnsToRecord", "WorkingSet")', { wsiId: $scope.fileid, columns: $scope.selected_fields, newField: $scope.newFieldName, newFile: $scope.newFileName, strIgnoreNull: strIgnoreNull, strIgnoreZero: strIgnoreZero })
            .done(function () {
                //$.colorbox.close();
                setTimeout(function () {
                    $.colorbox({ html: "<h4>This proccess could run a little longer, please wait</h4><h5>When it done the new file will add to your <a href='@Url.Action("Manage","WorkingSet")'>Working Set</a></h5>" });
                }, 1000);
            })
            .fail(function (rs) {
                alert(rs.responseText);
            })
            .always();
        }
    });
</script>


<script type="text/javascript">
    $(document).ready(function () {
        $('.show-hidden-detail').click(function () {
            var content = $(this).find('div.hidden-content').html();
            $.colorbox({html:content,width:'60%'});
        });

    });
    function IncludeTransferColumnsToRecord(obj) {
        if (!confirm('I am sure that i checked the file result, It OK anh include this to current working set'))
            return;
        var lnk = $(obj);
        var url = lnk.attr('at-href');
        $.get(url, {})
        .done(function (data) {
            alert("Done");
        })
        .fail(function (err) {
            alert(err.responseText);
        })
        .always();
    }
</script>